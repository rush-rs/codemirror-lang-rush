@precedence {
    return,
    comment,
    call,
    exprwithblock,
    prefix @right,
    infix @left,
    assign @right
}

@top Program {
    (item)*
}

item {
    FunctionDefinition | LetStmt
}

FunctionDefinition { kw<"fn"> Ident Parameters Block }

Parameters {
    "(" (Ident ("," Ident)*)? ")"
}

Block {
  "{" Statement* Expression? "}"
}

Statement {
    ReturnStmt |
    BreakStmt |
    ContinueStmt |
    LetStmt |
    LoopStmt |
    WhileStmt |
    ForStmt |
    ExprStmt
}

LetStmt {
    kw<"let"> (kw<"mut">)? Ident ( ":" Type )? "=" Expression ";"
}

LoopStmt {
    kw<"loop"> Block ";"?
}

WhileStmt {
    kw<"while"> Expression Block ";"?
}

ForStmt {
    kw<"for"> Ident "=" Expression ";" Expression ";" Expression Block ";"?
}

ExprStmt {
    (ExprWithoutBlock ";") |
    (!exprwithblock ExprWithBlock ";"?)
}

Expression {
    ExprWithBlock |
    ExprWithoutBlock
}

ExprWithBlock {
    Block |
    IfExpr
}

ExprWithoutBlock {
    Number |
    Bool |
    Char |
    VariableName |
    PrefixExpr |
    InfixExpr |
    AssignExpr |
    CallExpr |
    CastExpr |
    "(" Expression ")"
}

PrefixExpr {
    !prefix PrefixOp Expression
}

AssignExpr {
    Ident !assign AssignOp Expression
}

CallExpr {
    VariableName !call "(" ArgumentList? ")"
}

CastExpr {
    Expression kw<"as"> Type
}

Type {
  @specialize[@name=Type]<Ident, "int" | "float" | "bool" | "char">
}

ArgumentList {
    Expression ( "," Expression )* ","?
}

InfixExpr {
    Expression !infix InfixOp Expression
}

IfExpr {
  kw<"if"> Expression Block (kw<"else"> (IfExpr | Block))?
}

Bool {
  @specialize[@name=Bool]<Ident, "true" | "false">
}

ReturnStmt {
  !return kw<"return"> Expression?
}

BreakStmt {
  kw<"break">
}

ContinueStmt {
  kw<"continue">
}

@skip { token_1 | LineComment | BlockComment }

@tokens {
    token_1 {
        " " | "\n" | "\t" | "\r"
    }

    LineComment {
        "//" ![\n]*
    }

    BlockComment { "/*" blockCommentRest }

    blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

    blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

    InfixOp {
        "+" |
        "-" |
        "*" |
        "/" |
        "%" |
        "**" |
        "==" |
        "!=" |
        "<" |
        ">" |
        "<=" |
        ">=" |
        "<<" |
        ">>" |
        "|" |
        "&" |
        "^" |
        "||" |
        "&&"
    }

    AssignOp {
        "=" |
        "+=" |
        "-=" |
        "*=" |
        "/=" |
        "%=" |
        "**=" |
        "<<=" |
        ">>=" |
        "|=" |
        "&=" |
        "^="
    }

    PrefixOp {
        "-"
        | "!"
    }

    Number {
        $[0-9]+ ( ("." $[0-9]+) | "f" )?
    }

    word { $[a-zA-Z_] $[a-zA-Z0-9_]* }

    Ident { word }

    Char {
        "'" (![\\'] | "\\" _)* "'"?
    }

    "." "," ";"
    "(" ")" "{" "}" "[" "]"

    @precedence { LineComment, AssignOp, PrefixOp, InfixOp }
}

kw<term> { @specialize[@name={term}]<Ident, term> }
BuiltinFunc { @specialize[@name=BuiltinFunc]<Ident, "exit" > }
VariableName { BuiltinFunc | Ident }
